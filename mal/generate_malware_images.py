import os
import zipfile
import numpy as np
from PIL import Image

# Unzip your malware binaries
def extract_zip(zip_path, extract_to='malware_samples'):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    return extract_to

# Decide width based on file size (flexible)
def choose_width(file_size):
    if file_size < 10 * 1024:     # <10 KB
        return 32
    elif file_size < 30 * 1024:   # <30 KB
        return 64
    elif file_size < 100 * 1024:  # <100 KB
        return 128
    elif file_size < 300 * 1024:
        return 256
    elif file_size < 600 * 1024:
        return 384
    else:
        return 512

# Convert a binary file to a grayscale image
def binary_to_image(file_path, output_dir):
    with open(file_path, 'rb') as f:
        data = f.read()

    byte_arr = np.frombuffer(data, dtype=np.uint8)
    file_size = len(byte_arr)
    width = choose_width(file_size)

    height = int(np.ceil(len(byte_arr) / width))
    padded_len = width * height
    padded_data = np.pad(byte_arr, (0, padded_len - len(byte_arr)), mode='constant')

    img = padded_data.reshape((height, width))
    img = Image.fromarray(img.astype('uint8'))

    base_name = os.path.basename(file_path)
    image_path = os.path.join(output_dir, f"{os.path.splitext(base_name)[0]}_{width}w.png")
    img.save(image_path)

# Main process
def generate_images_from_binaries(zip_path):
    extract_path = extract_zip(zip_path)
    output_path = "malware_images"
    os.makedirs(output_path, exist_ok=True)

    for root, _, files in os.walk(extract_path):
        for file in files:
            binary_path = os.path.join(root, file)
            binary_to_image(binary_path, output_path)

    print(f"Images saved to: {output_path}")

# Run the script
generate_images_from_binaries('malware_binaries.zip')